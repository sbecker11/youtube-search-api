[MASTER]
# A comma-separated list of package or module names from where C extensions may be loaded.
extension-pkg-whitelist=

# Add files or directories to the blacklist. They should be base names, not paths.
ignore=CVS

# Add files or directories matching the regex patterns to the blacklist. The regex matches against base names, not paths.
ignore-patterns=

# Python code to execute, usually for sys.path manipulation such as pygtk.require().
init-hook=

# Use multiple processes to speed up Pylint.
jobs=3

# List of plugins (as comma separated values of python module names) to load, usually to register additional checkers.
load-plugins=

# Pickle collected data for later comparisons.
persistent=

# Specify a configuration file.
rcfile=

# When enabled, pylint would attempt to guess common misconfiguration and emit user-friendly hints instead of false-positive error messages.
suggestion-mode=yes

# Allow loading of arbitrary C extensions. Extensions are imported into the active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no

[MESSAGES CONTROL]
# Only show warnings with the listed confidence levels. Leave empty to show all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence=

# use this to understand what you're disabling/enabling
# pylint --rcfile=.pylintrc --help-msg=C0111

# see http://pylint-messages.wikidot.com/all-codes
disable =
    C0111,  # Missing module or class docstring
    C0114,  # Missing module docstring (missing-module-docstring)
    C0115,  # Missing class docstring (missing-class-docstring)
    C0116,  # Missing function or method docstring (missing-function-docstring)
    C0209,   # consider-using-f-strings
    C0103   # Invalid name

# Other common codes:
# C0301: Line too long
# C0326: Bad whitespace
# C0111: Missing docstring
# R0912: Too many branches
# R0914: Too many local variables
# W0611: Unused import
# E0602: Undefined variable
# E1101: Module has no attribute

# Enable the message, report, category or checker with the given id(s). You can either give multiple identifiers separated by comma (,) or put this option multiple times. See also the "--disable" option for examples.
enable=

[REPORTS]
# Set the output format. Available formats are text, parseable, colorized, json and msvs (visual studio).
output-format=text

# Tells whether to display a full report or only the messages.
reports=no

[REFACTORING]
# Maximum number of nested blocks for function / method body
max-nested-blocks=5

[FORMAT]
# Maximum number of characters on a single line.
max-line-length=100

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=

# Allow the body of a class to be on the same line as the class declaration.
single-line-class-stmt=no

# Allow the body of an if to be on the same line as the test.
single-line-if-stmt=no

[LOGGING]
# Logging modules to check that the string format arguments are in logging function parameter format
logging-modules=logging

[BASIC]
# Naming style matching correct argument names.
argument-naming-style=snake_case

# Naming style matching correct attribute names.
attr-naming-style=snake_case

# Naming style matching correct class attribute names.
class-attribute-naming-style=any

# Naming style matching correct class names.
class-naming-style=PascalCase

# Naming style matching correct constant names.
const-naming-style=UPPER_CASE

# Naming style matching correct function names.
function-naming-style=snake_case

# Naming style matching correct method names.
method-naming-style=snake_case

# Naming style matching correct module names.
module-naming-style=snake_case

# Naming style matching correct variable names.
variable-naming-style=snake_case

# Regular expression matching correct argument names.
argument-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct attribute names.
attr-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct class attribute names.
class-attribute-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct class names.
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Regular expression matching correct constant names.
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression matching correct function names.
function-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct method names.
method-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct module names.
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression matching correct variable names.
variable-rgx=[a-z_][a-z0-9_]{2,30}$

[DESIGN]
# Maximum number of arguments for function / method.
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Maximum number of boolean expressions in a if statement.
max-bool-expr=5

# Maximum number of branch for function / method body.
max-branches=12

# Maximum number of locals for function / method body.
max-locals=15

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Minimum number of public methods for a class (see R0903).
min-public-methods=2

[IMPORTS]
# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Analyse import fallback blocks. This can be used to support both Python 2 and 3 compatible code, which means that the block might have code that exists only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

# Deprecated modules which should not be used, separated by a comma.
deprecated-modules=

# Create a graph of every (i.e. internal and external) dependencies in the given file (report RP0402 must not be disabled).
ext-import-graph=

# Create a graph of external dependencies in the given file (report RP0402 must not be disabled).
import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must not be disabled).
int-import-graph=

# Force import order to recognize a module as part of the standard compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=

# Force import order to recognize a module as part of the current python project.
# known-first-party=

# Maximum number of imports in a module.
# max-imports=10

[MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO

[SIMILARITIES]
# Minimum lines number of a similarity.
min-similarity-lines=4

[VARIABLES]
# A regular expression matching the name of dummy variables (i.e. expectedly not used).
dummy-variables-rgx=_|dummy

# List of additional names supposed to be defined in builtins. Remember that you should avoid to define new builtins when possible.
additional-builtins=

[CLASSES]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs
