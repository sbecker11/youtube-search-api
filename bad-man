# pylint: disable=C0111  # Missing module docstring
# pylint: disable=C0114  # Missing module docstring
# pylint: disable=C0116  # Missing function docstring

import os
# import urllib
from flask import Flask, render_template
import jinja2
# use pip install Jinja2


from dotenv import load_dotenv
# use pip install python-dotenv

from googleapiclient.discovery import build
# use  pip install google-api-python-client

# from optparse import OptionParser

load_dotenv()

# Retrieve API_KEY from environment variables
API_KEY = os.getenv("API_KEY")
JINJA_ENVIRONMENT = jinja2.Environment(
    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)),
    extensions=["jinja2.ext.autoescape"],
)

# Set DEVELOPER_KEY to the "API key" value from the Google Developers Console:
# https://console.developers.google.com/project/_/apiui/credential
# Please ensure that you have enabled the YouTube Data API for your project.
DEVELOPER_KEY = API_KEY
YOUTUBE_API_SERVICE_NAME = "youtube"
YOUTUBE_API_VERSION = "v3"


app = Flask(__name__)

@app.route('/')
def main_handler():
    # You must set up a project and get an
    # API key to run this project. Please visit
    # <landing page> to do so.
    youtube = build(
        YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION, developerKey=DEVELOPER_KEY
    )
    if DEVELOPER_KEY == API_KEY:
        return f"{YOUTUBE_API_SERVICE_NAME}, {YOUTUBE_API_VERSION}, {DEVELOPER_KEY}"

    search_response = (
        youtube.search()
        .list(q="Hello", part="id,snippet", maxResults=5)
        .execute()
    )

    videos = []
    channels = []
    playlists = []

    for search_result in search_response.get("items", []):
        if search_result["id"]["kind"] == "youtube#video":
            videos.append(
                f"{search_result['snippet']['title']} ({search_result['id']['videoId']})"
            )
        elif search_result["id"]["kind"] == "youtube#channel":
            channels.append(
                f"{search_result['snippet']['title']} ({search_result['id']['channelId']})"
            )
        elif search_result["id"]["kind"] == "youtube#playlist":
            playlists.append(
                f"{search_result['snippet']['title']} ({search_result['id']['playlistId']})"
            )

        template_values = {
            "videos": videos,
            "channels": channels,
            "playlists": playlists,
        }

        search_response.headers["Content-type"] = "text/plain"
        template = JINJA_ENVIRONMENT.get_template("index.html")
        search_response.write(template.render(template_values))

        return render_template("index.html", **template_values)

if __name__ == "__main__":
    app.run(debug=True)
